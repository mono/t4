name: Build

on: [push, pull_request]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        config: [ Release, Debug ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # GitVersioning needs deep clone

    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '2.1.x'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Set up NuGet
      uses: nuget/setup-nuget@v1

    - name: Restore
      run: dotnet restore Mono.TextTemplating.sln

    - name: Build
      run: dotnet build Mono.TextTemplating.sln -c ${{ matrix.config }} --no-restore

    - name: Test (Windows)
      if: startsWith (matrix.os, 'windows')
      run: dotnet test -c ${{ matrix.config }} --no-build

    - name: Test (Linux/Mac)
      if: startsWith (matrix.os, 'windows') == false
      # dotnet test doesn't support mono so we have to use the xunit console runner
      run: |
        nuget install xunit.runner.console -Version 2.4.1 -OutputDirectory testrunner
        mono ./testrunner/xunit.runner.console.2.4.1/tools/net472/xunit.console.exe ./Mono.TextTemplating.Tests/bin/${{ matrix.config }}/net472/Mono.TextTemplating.Tests.dll  -parallel none -noshadow -noappdomain
        dotnet test -c ${{ matrix.config }} --no-build -f netcoreapp2.1
        dotnet test -c ${{ matrix.config }} --no-build -f netcoreapp3.1
        dotnet test -c ${{ matrix.config }} --no-build -f net5.0

    - uses: actions/upload-artifact@v2
      if: matrix.config == 'Release'
      with:
        name: packages
        path: packages/Release

  publish:
    if: github.event_name == 'push'
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: packages
          name: packages

      - name: Publish to GPR
        run: |
          dotnet nuget push "packages\**\*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }} --skip-duplicate

      - name: Publish to NuGet.org
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          dotnet nuget push "packages\**\*.nupkg" --api-key ${{ secrets.NUGETAPIKEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
